name: Core C++ Tests

on:
  push:
    paths:
      - '.github/workflows/core_cpp_test.yml'
      - 'apps/core/tests/test_images/**'
      - 'apps/core/**/CMakeLists.txt'
      - 'apps/core/CMakeLists.txt'
      - 'apps/core/**/*.cmake'
      - 'apps/core/**.cpp'
      - 'apps/core/**.h'
  pull_request:
    paths:
      - '.github/workflows/core_cpp_test.yml'
      - 'apps/core/tests/test_images/**'
      - 'apps/core/**/CMakeLists.txt'
      - 'apps/core/CMakeLists.txt'
      - 'apps/core/**/*.cmake'
      - 'apps/core/**.cpp'
      - 'apps/core/**.h'

env:
  OPENCV_VERSION: 4.8.0

jobs:
  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: apps/core

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache OpenCV
        if: runner.os != 'Linux'
        id: cache-opencv
        uses: actions/cache@v3
        with:
          path: |
            apps/core/opencv_build
          key: opencv-${{ env.OPENCV_VERSION }}-${{ runner.os }}

      - name: Build OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          mkdir -p opencv_build/x86_64 && cd opencv_build/x86_64
          cmake -D CMAKE_BUILD_TYPE=RELEASE \
                  -D CMAKE_INSTALL_PREFIX=$(pwd) \
                  -D BUILD_LIST=core,imgcodecs \
                  -D BUILD_EXAMPLES=OFF \
                  -D BUILD_TESTS=OFF \
                  -D BUILD_PERF_TESTS=OFF \
                  -D WITH_IPP=OFF \
                  -D WITH_OPENEXR=OFF \
                  ../../external/opencv
          make -j$(nproc)

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy

      - name: Create build directory
        run: |
          mkdir build-test

      - name: Configure CMake
        working-directory: apps/core/build-test
        run: |
          cmake ..


      - name: Build project
        working-directory: apps/core/build-test
        run: |
          make -j$(nproc)

      - name: Run tests
        working-directory: apps/core/build-test
        run: |
          ctest --output-on-failure
