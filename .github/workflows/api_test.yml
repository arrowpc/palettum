name: API Tests

on:
  workflow_dispatch:

  push:
    paths:
      - '.github/workflows/api_test.yml'
      - 'apps/api/**'
  pull_request:
    paths:
      - '.github/workflows/api_test.yml'
      - 'apps/api/**'

defaults:
  run:
    working-directory: apps/api

env:
  OPENCV_VERSION: 4.8.0

jobs:
  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Cache OpenCV
        id: cache-opencv
        uses: actions/cache@v3
        with:
          path: |
            apps/core/opencv_build
          key: opencv-${{ env.OPENCV_VERSION }}-${{ runner.os }}

      - name: Build OpenCV
        if: runner.os != 'Windows' && steps.cache-opencv.outputs.cache-hit != 'true'
        working-directory: apps/core
        run: |
          mkdir -p opencv_build/x86_64 && cd opencv_build/x86_64
          cmake -D CMAKE_BUILD_TYPE=RELEASE \
                  -D CMAKE_INSTALL_PREFIX=$(pwd) \
                  -D BUILD_LIST=core,imgcodecs \
                  -D BUILD_EXAMPLES=OFF \
                  -D BUILD_TESTS=OFF \
                  -D BUILD_PERF_TESTS=OFF \
                  -D WITH_IPP=OFF \
                  -D WITH_OPENEXR=OFF \
                  ../../external/opencv
          make -j$(nproc)

      - name: Build OpenCV (Windows)
        if: runner.os == 'Windows' && steps.cache-opencv.outputs.cache-hit != 'true'
        working-directory: apps/core
        run: |
          New-Item -Type Directory -Path opencv_build\AMD64
          cd opencv_build\AMD64
          cmake -D CMAKE_BUILD_TYPE=RELEASE `
                -D CMAKE_INSTALL_PREFIX=$PWD.Path `
                -D BUILD_LIST=core,imgcodecs `
                -D BUILD_EXAMPLES=OFF `
                -D BUILD_TESTS=OFF `
                -D BUILD_PERF_TESTS=OFF `
                -D WITH_IPP=OFF `
                -D WITH_OPENEXR=OFF `
                ..\..\external\opencv
          cmake --build . --config Release --parallel

      - name: Install palettum
        if: runner.os != 'Windows'
        working-directory: apps/core
        run: |
          pip install .

      - name: Install palettum (Windows)
        if: runner.os == 'Windows'
        working-directory: apps/core
        run: |
          pip install wheel delvewheel
          
          python setup.py install bdist_wheel
          
          $wheel = Get-ChildItem -Path dist -Filter "*win_amd64.whl" | Select-Object -First 1
          delvewheel repair $wheel.FullName --add-path opencv_build\AMD64\bin\Release
          
          $wheel = Get-ChildItem -Path wheelhouse -Filter "*win_amd64.whl" | Select-Object -First 1
          pip install $wheel.FullName --force-reinstall

      - name: Install dependencies from requirements.txt
        run: pip install -r requirements.txt

      - name: Run Tests
        run: pytest
