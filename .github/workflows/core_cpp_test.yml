name: Core C++ Tests

on:
  workflow_dispatch:

  push:
    paths:
      - '.github/workflows/core_cpp_test.yml'
      - 'apps/core/tests/test_images/**'
      - 'apps/core/**/CMakeLists.txt'
      - 'apps/core/CMakeLists.txt'
      - 'apps/core/**/*.cmake'
      - 'apps/core/vcpkg.json'
      - 'apps/core/**.cpp'
      - 'apps/core/**.h'
  pull_request:
    paths:
      - '.github/workflows/core_cpp_test.yml'
      - 'apps/core/tests/test_images/**'
      - 'apps/core/**/CMakeLists.txt'
      - 'apps/core/CMakeLists.txt'
      - 'apps/core/vcpkg.json'
      - 'apps/core/**/*.cmake'
      - 'apps/core/**.cpp'
      - 'apps/core/**.h'

jobs:
  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-13, windows-2019 ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: apps/core

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy

      - name: Create build directory
        run: |
          mkdir build-test

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake autoconf-archive build-essential

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install autoconf automake autoconf-archive libomp

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/apps/core/external/vcpkg
          runVcpkgInstall: true

      - name: Configure CMake
        working-directory: apps/core/build-test
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            export OpenMP_ROOT=$(brew --prefix)/opt/libomp
          fi
          cmake -D CMAKE_BUILD_TYPE=Release ..

      - name: Build project
        if: runner.os != 'Windows'
        working-directory: apps/core/build-test
        run: |
          make -j$(nproc)

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        working-directory: apps/core/build-test
        run: |
          cmake --build . --config Release --parallel

      - name: Run tests
        working-directory: apps/core/build-test
        run: |
          ctest --output-on-failure -C Release
